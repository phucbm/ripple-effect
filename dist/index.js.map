{"version":3,"sources":["../src/index.ts"],"sourcesContent":["interface RippleEffectParams {\n    /** The total number of elements to apply the ripple effect to */\n    length: number;\n    /** The index of the center element (focal point of the ripple) */\n    centerIndex: number;\n    /** The radius of the ripple effect (how many elements around center are affected) */\n    rippleRadius?: number;\n    /**\n     * Callback function executed for each element\n     * @param normalizedValue - Value between 0 and 1 (1 at center, decreasing to 0 at edge)\n     * @param index - The current element index\n     */\n    callback: (normalizedValue: number, index: number) => void;\n}\n\n/**\n * Applies a ripple effect that distributes normalized values [0;1] from a center point\n *\n * The effect creates a wave-like distribution where:\n * - Center element receives value 1.0\n * - Values decrease linearly as distance from center increases\n * - Elements outside the radius receive value 0.0\n *\n * @param params - Configuration object for the ripple effect\n * @param params.length - Total number of elements to process\n * @param params.centerIndex - Index of the center element (focal point)\n * @param params.rippleRadius - How many elements around center are affected (default: 3)\n * @param params.callback - Function called for each element with normalized value and index\n *\n * @example\n * ```typescript\n * // Scale animation example\n * applyRippleEffect({\n *   length: 10,\n *   centerIndex: 5,\n *   rippleRadius: 3,\n *   callback: (normalizedValue, index) => {\n *     const scaleValue = 1 + normalizedValue; // Maps [0;1] to [1;2]\n *     gsap.to(elements[index], { scaleY: scaleValue });\n *   }\n * });\n * ```\n */\nexport function applyRippleEffect({\n                                      length,\n                                      centerIndex,\n                                      rippleRadius = 3,\n                                      callback\n                                  }: RippleEffectParams): void {\n    // Apply ripple effect to all elements\n    for (let i = 0; i < length; i++) {\n        const distance = Math.abs(i - centerIndex);\n\n        let normalizedValue: number;\n        if (distance <= rippleRadius) {\n            if (rippleRadius === 0) {\n                // Special case: only center element gets value 1.0\n                normalizedValue = distance === 0 ? 1.0 : 0.0;\n            } else {\n                // Calculate normalized value: 1 at center, decreasing linearly to 0 at edge\n                normalizedValue = Math.max(0, 1 - (distance / rippleRadius));\n            }\n        } else {\n            normalizedValue = 0;\n        }\n\n        // Execute callback with normalized value [0;1] and index\n        callback(normalizedValue, i);\n    }\n}"],"mappings":";;;;;;;AA2CO,SAASA,EAAkB,CACI,OAAAC,EACA,YAAAC,EACA,aAAAC,EAAe,EACf,SAAAC,CACJ,EAA6B,CAE3D,QAASC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,IAAMC,EAAW,KAAK,IAAID,EAAIH,CAAW,EAErCK,EACAD,GAAYH,EACRA,IAAiB,EAEjBI,EAAkBD,IAAa,EAAI,EAAM,EAGzCC,EAAkB,KAAK,IAAI,EAAG,EAAKD,EAAWH,CAAa,EAG/DI,EAAkB,EAItBH,EAASG,EAAiBF,CAAC,CAC/B,CACJ","names":["applyRippleEffect","length","centerIndex","rippleRadius","callback","i","distance","normalizedValue"]}